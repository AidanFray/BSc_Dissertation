// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace FTP
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// OpenFileZilla - Use 'OpenFileZillaParams' to pass parameters into this method.
        /// </summary>
        public void OpenFileZilla()
        {

            // Press keyboard shortcut keys '{LWin}'
            Keyboard.SendKeys(this.OpenFileZillaParams.SendKeys, ModifierKeys.None);

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.
        }
        
        /// <summary>
        /// FTP_ValidConnect - Use 'FTP_ValidConnectParams' to pass parameters into this method.
        /// </summary>
        public void FTP_ValidConnect()
        {
            #region Variable Declarations
            WinEdit uIHostEdit = this.UIFileZillaWindow.UIPanelClient.UIHostEdit;
            WinButton uIQuickconnectButton = this.UIFileZillaWindow.UIPanelClient.UIQuickconnectButton;
            #endregion

            // Type '127.0.0.1' in 'Host:' text box
            uIHostEdit.Text = this.FTP_ValidConnectParams.UIHostEditText;

            // Click '&Quickconnect' button
            Mouse.Click(uIQuickconnectButton, new Point(34, 12));
        }
        
        /// <summary>
        /// FTP_CheckDirectoryHasBeenListed - Use 'FTP_CheckDirectoryHasBeenListedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void FTP_CheckDirectoryHasBeenListed()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIFileZillaWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '/'
            Assert.AreEqual(this.FTP_CheckDirectoryHasBeenListedExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// Assert_CheckForErrorConnecting - Use 'Assert_CheckForErrorConnectingExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_CheckForErrorConnecting()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIFileZillaWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box contains 'Error:	Could not connect to server'
            Assert.IsFalse(this.Assert_CheckForErrorConnectingExpectedValues.UIItemEditText1.Contains(uIItemEdit.Text), "FileZilla could not connect");
        }
        
        #region Properties
        public virtual OpenFileZillaParams OpenFileZillaParams
        {
            get
            {
                if ((this.mOpenFileZillaParams == null))
                {
                    this.mOpenFileZillaParams = new OpenFileZillaParams();
                }
                return this.mOpenFileZillaParams;
            }
        }
        
        public virtual FTP_ValidConnectParams FTP_ValidConnectParams
        {
            get
            {
                if ((this.mFTP_ValidConnectParams == null))
                {
                    this.mFTP_ValidConnectParams = new FTP_ValidConnectParams();
                }
                return this.mFTP_ValidConnectParams;
            }
        }
        
        public virtual FTP_CheckDirectoryHasBeenListedExpectedValues FTP_CheckDirectoryHasBeenListedExpectedValues
        {
            get
            {
                if ((this.mFTP_CheckDirectoryHasBeenListedExpectedValues == null))
                {
                    this.mFTP_CheckDirectoryHasBeenListedExpectedValues = new FTP_CheckDirectoryHasBeenListedExpectedValues();
                }
                return this.mFTP_CheckDirectoryHasBeenListedExpectedValues;
            }
        }
        
        public virtual Assert_CheckForErrorConnectingExpectedValues Assert_CheckForErrorConnectingExpectedValues
        {
            get
            {
                if ((this.mAssert_CheckForErrorConnectingExpectedValues == null))
                {
                    this.mAssert_CheckForErrorConnectingExpectedValues = new Assert_CheckForErrorConnectingExpectedValues();
                }
                return this.mAssert_CheckForErrorConnectingExpectedValues;
            }
        }
        
        public UIFileZillaWindow UIFileZillaWindow
        {
            get
            {
                if ((this.mUIFileZillaWindow == null))
                {
                    this.mUIFileZillaWindow = new UIFileZillaWindow();
                }
                return this.mUIFileZillaWindow;
            }
        }
        #endregion
        
        #region Fields
        private OpenFileZillaParams mOpenFileZillaParams;
        
        private FTP_ValidConnectParams mFTP_ValidConnectParams;
        
        private FTP_CheckDirectoryHasBeenListedExpectedValues mFTP_CheckDirectoryHasBeenListedExpectedValues;
        
        private Assert_CheckForErrorConnectingExpectedValues mAssert_CheckForErrorConnectingExpectedValues;
        
        private UIFileZillaWindow mUIFileZillaWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenFileZilla'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class OpenFileZillaParams
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys '{LWin}'
        /// </summary>
        public string SendKeys = "{LWin}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FTP_ValidConnect'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class FTP_ValidConnectParams
    {
        
        #region Fields
        /// <summary>
        /// Type '127.0.0.1' in 'Host:' text box
        /// </summary>
        public string UIHostEditText = "127.0.0.1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FTP_CheckDirectoryHasBeenListed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class FTP_CheckDirectoryHasBeenListedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '/'
        /// </summary>
        public string UIItemEditText = "/";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_CheckForErrorConnecting'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Assert_CheckForErrorConnectingExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box contains 'Status:	Connecting to 127.0.0.1:21...        ///Status:	Connection attempt failed with "ECONNREFUSED - Connection refused by server".        ///Error:	Could not connect to server        ///Status:	Waiting to retry...        ///'
        /// </summary>
        public string UIItemEditText = "Status:\tConnecting to 127.0.0.1:21...\rStatus:\tConnection attempt failed with \"ECO" +
            "NNREFUSED - Connection refused by server\".\rError:\tCould not connect to server\rSt" +
            "atus:\tWaiting to retry...\r";
        
        /// <summary>
        /// Verify that the 'Text' property of text box contains 'Error:	Could not connect to server'
        /// </summary>
        public string UIItemEditText1 = "Error:\tCould not connect to server";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFileZillaWindow : WinWindow
    {
        
        public UIFileZillaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "FileZilla";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "wxWindowNR";
            this.WindowTitles.Add("FileZilla");
            this.WindowTitles.Add("127.0.0.1 - FileZilla");
            #endregion
        }
        
        #region Properties
        public UIPanelClient UIPanelClient
        {
            get
            {
                if ((this.mUIPanelClient == null))
                {
                    this.mUIPanelClient = new UIPanelClient(this);
                }
                return this.mUIPanelClient;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelClient mUIPanelClient;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPanelClient : WinClient
    {
        
        public UIPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "panel";
            this.WindowTitles.Add("FileZilla");
            #endregion
        }
        
        #region Properties
        public WinEdit UIHostEdit
        {
            get
            {
                if ((this.mUIHostEdit == null))
                {
                    this.mUIHostEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIHostEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Host:";
                    this.mUIHostEdit.WindowTitles.Add("FileZilla");
                    #endregion
                }
                return this.mUIHostEdit;
            }
        }
        
        public WinButton UIQuickconnectButton
        {
            get
            {
                if ((this.mUIQuickconnectButton == null))
                {
                    this.mUIQuickconnectButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIQuickconnectButton.SearchProperties[WinButton.PropertyNames.Name] = "Quickconnect";
                    this.mUIQuickconnectButton.WindowTitles.Add("FileZilla");
                    #endregion
                }
                return this.mUIQuickconnectButton;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIHostEdit;
        
        private WinButton mUIQuickconnectButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("127.0.0.1 - FileZilla");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("127.0.0.1 - FileZilla");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "RICHEDIT50W";
            this.WindowTitles.Add("127.0.0.1 - FileZilla");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("127.0.0.1 - FileZilla");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
}
