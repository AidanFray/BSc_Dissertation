// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UI_Tests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfButton uISTARTButton = this.UIWpfWindow.UISTARTButton;
            WpfButton uIRESTARTButton = this.UIWpfWindow.UIRESTARTButton;
            WpfButton uIRButton = this.UIWpfWindow.UIRButton;
            #endregion

            // Click 'START' button
            Mouse.Click(uISTARTButton, new Point(154, 8));

            // Click 'RESTART' button
            Mouse.Click(uIRESTARTButton, new Point(205, 10));

            // Click 'R' button
            Mouse.Click(uIRButton, new Point(13, 16));

            // Double-Click 'R' button
            Mouse.DoubleClick(uIRButton, new Point(2, 14));
        }
        
        /// <summary>
        /// StartUDP_Server
        /// </summary>
        public void StartUDP_Server()
        {
            #region Variable Declarations
            WpfButton uISTARTButton = this.UIWpfWindow.UISTARTButton;
            WpfButton uIRESTARTButton = this.UIWpfWindow.UIRESTARTButton;
            #endregion

            // Click 'START' button
            Mouse.Click(uISTARTButton, new Point(168, 4));

            // Click 'RESTART' button
            Mouse.Click(uIRESTARTButton, new Point(172, 14));
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WpfButton uISTARTButton = this.UIWpfWindow.UISTARTButton;
            WpfButton uIRESTARTButton = this.UIWpfWindow.UIRESTARTButton;
            #endregion

            // Click 'START' button
            Mouse.Click(uISTARTButton, new Point(199, 11));

            // Click 'RESTART' button
            Mouse.Click(uIRESTARTButton, new Point(142, 11));

            // Click 'START' button
            Mouse.Click(uISTARTButton, new Point(180, 3));
        }
        
        /// <summary>
        /// Starts and resets the GUI Window
        /// </summary>
        public void UDP_Start()
        {
            #region Variable Declarations
            WpfButton uISTARTButton = this.UIWpfWindow.UISTARTButton;
            WpfButton uIRESTARTButton = this.UIWpfWindow.UIRESTARTButton;
            #endregion

            // Click 'START' button
            Mouse.Click(uISTARTButton, new Point(232, 13));

            // Click 'RESTART' button
            Mouse.Click(uIRESTARTButton, new Point(245, 10));
        }
        
        /// <summary>
        /// Random_Click_Test
        /// </summary>
        public void Random_Click_Test()
        {
            #region Variable Declarations
            WpfButton uIRButton = this.UIWpfWindow.UIRButton;
            #endregion

            // Click 'R' button
            Mouse.Click(uIRButton, new Point(7, 4));

            // Double-Click 'R' button
            Mouse.DoubleClick(uIRButton, new Point(7, 4));

            // Double-Click 'R' button
            Mouse.DoubleClick(uIRButton, new Point(7, 4));

            // Double-Click 'R' button
            Mouse.DoubleClick(uIRButton, new Point(7, 4));

            // Double-Click 'R' button
            Mouse.DoubleClick(uIRButton, new Point(7, 4));
        }
        
        /// <summary>
        /// Extensive - Use 'ExtensiveParams' to pass parameters into this method.
        /// </summary>
        public void Extensive()
        {
            #region Variable Declarations
            WinListItem uIItem2InterimReportListItem = this.UIProgramManagerWindow.UIDesktopList.UIItem2InterimReportListItem;
            WinButton uICloseButton = this.UIItem2InterimReportWindow.UIItem2InterimReportTitleBar.UICloseButton;
            WinTreeItem uIGitHubpinnedTreeItem = this.UIFileExplorerWindow.UITreeViewWindow.UIQuickaccessTreeItem.UIGitHubpinnedTreeItem;
            WinEdit uINameEdit = this.UIFileExplorerWindow.UIItemWindow.UIDissertation_ProjectListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UIFileExplorerWindow.UIItemWindow1.UIClientServerListItem.UINameEdit;
            WinEdit uINameEdit2 = this.UIFileExplorerWindow.UIItemWindow2.UIClientServerListItem.UINameEdit;
            WinEdit uINameEdit3 = this.UIFileExplorerWindow.UIItemWindow3.UIBinListItem.UINameEdit;
            WinEdit uINameEdit4 = this.UIFileExplorerWindow.UIItemWindow4.UIDebugListItem.UINameEdit;
            WinEdit uINameEdit5 = this.UIFileExplorerWindow.UIItemWindow5.UIClientServerListItem.UINameEdit;
            WinList uIItemsViewList = this.UIFileExplorerWindow.UIShellViewWindow.UIShellViewClient.UIItemsViewList;
            WinMenuItem uIOpencommandwindowherMenuItem = this.UIItemWindow.UIContextMenu.UIOpencommandwindowherMenuItem;
            WinClient uICWindowssystem32cmdeClient = this.UICWindowssystem32cmdeWindow.UICWindowssystem32cmdeClient;
            WinClient uISelectCWindowssystemClient = this.UICWindowssystem32cmdeWindow.UISelectCWindowssystemClient;
            WpfButton uISTARTButton = this.UIWpfWindow.UISTARTButton;
            WpfButton uIRESTARTButton = this.UIWpfWindow.UIRESTARTButton;
            #endregion

            // Double-Click '2 - Interim Report' list item
            Mouse.DoubleClick(uIItem2InterimReportListItem, new Point(49, 53));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 28));

            // Press keyboard shortcut keys 'Windows + e'
            Keyboard.SendKeys(this.ExtensiveParams.SendKeys, ModifierKeys.Windows);

            // Click 'Quick access' -> 'GitHub (pinned)' tree item
            Mouse.Click(uIGitHubpinnedTreeItem, new Point(-8, 15));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(66, 13));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(46, 10));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit2, new Point(42, 11));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit3, new Point(42, 15));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit4, new Point(18, 12));

            // Click 'Name' text box
            Mouse.Click(uINameEdit5, new Point(50, 9));

            // Right-Click 'Items View' list box
            Mouse.Click(uIItemsViewList, MouseButtons.Right, ModifierKeys.None, new Point(8, 92));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(2, 104));

            // Right-Click 'Items View' list box while pressing Shift
            Mouse.Click(uIItemsViewList, MouseButtons.Right, ModifierKeys.Shift, new Point(8, 116));

            // Click 'Open command window here' menu item while pressing Shift
            Mouse.Click(uIOpencommandwindowherMenuItem, MouseButtons.Left, ModifierKeys.Shift, new Point(107, 11));

            // Click 'C:\Windows\system32\cmd.exe' client
            Mouse.Click(uICWindowssystem32cmdeClient, new Point(947, 114));

            // Type 'C' in 'Select C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uISelectCWindowssystemClient, this.ExtensiveParams.UISelectCWindowssystemClientSendKeys, ModifierKeys.None);

            // Type 'lient{LShiftKey}Serr{Back}{Back}rver{Space}-u{Space}s{Enter}' in 'C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uICWindowssystem32cmdeClient, this.ExtensiveParams.UICWindowssystem32cmdeClientSendKeys, ModifierKeys.None);

            // Click 'START' button
            Mouse.Click(uISTARTButton, new Point(162, 5));

            // Click 'RESTART' button
            Mouse.Click(uIRESTARTButton, new Point(182, 6));
        }
        
        /// <summary>
        /// test - Use 'testParams' to pass parameters into this method.
        /// </summary>
        public void test()
        {
            #region Variable Declarations
            WinComboBox uIOpenComboBox = this.UIRunWindow.UIItemWindow.UIOpenComboBox;
            WinEdit uIOpenEdit = this.UIRunWindow.UIItemWindow1.UIOpenEdit;
            WinClient uICWindowssystem32cmdeClient = this.UICWindowssystem32cmdeWindow.UICWindowssystem32cmdeClient;
            #endregion

            // Press keyboard shortcut keys 'Windows + r'
            Keyboard.SendKeys(this.testParams.SendKeys, ModifierKeys.Windows);

            // Select 'cmd' in 'Open:' combo box
            uIOpenComboBox.EditableItem = this.testParams.UIOpenComboBoxEditableItem;

            // Type '{Enter}' in 'Open:' text box
            Keyboard.SendKeys(uIOpenEdit, this.testParams.UIOpenEditSendKeys, ModifierKeys.None);

            // Type 'ping{Enter}' in 'C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uICWindowssystem32cmdeClient, this.testParams.UICWindowssystem32cmdeClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// test_cmd - Use 'test_cmdParams' to pass parameters into this method.
        /// </summary>
        public void test_cmd()
        {
            #region Variable Declarations
            WinClient uICommandPromptClient = this.UICommandPromptWindow.UICommandPromptClient;
            #endregion

            // Press keyboard shortcut keys '{LWin}'
            Keyboard.SendKeys(this.test_cmdParams.SendKeys, ModifierKeys.None);

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // Type 'tree{Enter}' in 'Command Prompt' client
            Keyboard.SendKeys(uICommandPromptClient, this.test_cmdParams.UICommandPromptClientSendKeys, ModifierKeys.None);
        }
        
        #region Properties
        public virtual ExtensiveParams ExtensiveParams
        {
            get
            {
                if ((this.mExtensiveParams == null))
                {
                    this.mExtensiveParams = new ExtensiveParams();
                }
                return this.mExtensiveParams;
            }
        }
        
        public virtual testParams testParams
        {
            get
            {
                if ((this.mtestParams == null))
                {
                    this.mtestParams = new testParams();
                }
                return this.mtestParams;
            }
        }
        
        public virtual test_cmdParams test_cmdParams
        {
            get
            {
                if ((this.mtest_cmdParams == null))
                {
                    this.mtest_cmdParams = new test_cmdParams();
                }
                return this.mtest_cmdParams;
            }
        }
        
        public UIWpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new UIWpfWindow();
                }
                return this.mUIWpfWindow;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIItem2InterimReportWindow UIItem2InterimReportWindow
        {
            get
            {
                if ((this.mUIItem2InterimReportWindow == null))
                {
                    this.mUIItem2InterimReportWindow = new UIItem2InterimReportWindow();
                }
                return this.mUIItem2InterimReportWindow;
            }
        }
        
        public UIFileExplorerWindow UIFileExplorerWindow
        {
            get
            {
                if ((this.mUIFileExplorerWindow == null))
                {
                    this.mUIFileExplorerWindow = new UIFileExplorerWindow();
                }
                return this.mUIFileExplorerWindow;
            }
        }
        
        public UIItemWindow6 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow6();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICWindowssystem32cmdeWindow UICWindowssystem32cmdeWindow
        {
            get
            {
                if ((this.mUICWindowssystem32cmdeWindow == null))
                {
                    this.mUICWindowssystem32cmdeWindow = new UICWindowssystem32cmdeWindow();
                }
                return this.mUICWindowssystem32cmdeWindow;
            }
        }
        
        public UIStartWindow UIStartWindow
        {
            get
            {
                if ((this.mUIStartWindow == null))
                {
                    this.mUIStartWindow = new UIStartWindow();
                }
                return this.mUIStartWindow;
            }
        }
        
        public UIMozillaFirefoxWindow UIMozillaFirefoxWindow
        {
            get
            {
                if ((this.mUIMozillaFirefoxWindow == null))
                {
                    this.mUIMozillaFirefoxWindow = new UIMozillaFirefoxWindow();
                }
                return this.mUIMozillaFirefoxWindow;
            }
        }
        
        public UICommandPromptWindow UICommandPromptWindow
        {
            get
            {
                if ((this.mUICommandPromptWindow == null))
                {
                    this.mUICommandPromptWindow = new UICommandPromptWindow();
                }
                return this.mUICommandPromptWindow;
            }
        }
        
        public UIRunWindow UIRunWindow
        {
            get
            {
                if ((this.mUIRunWindow == null))
                {
                    this.mUIRunWindow = new UIRunWindow();
                }
                return this.mUIRunWindow;
            }
        }
        #endregion
        
        #region Fields
        private ExtensiveParams mExtensiveParams;
        
        private testParams mtestParams;
        
        private test_cmdParams mtest_cmdParams;
        
        private UIWpfWindow mUIWpfWindow;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIItem2InterimReportWindow mUIItem2InterimReportWindow;
        
        private UIFileExplorerWindow mUIFileExplorerWindow;
        
        private UIItemWindow6 mUIItemWindow;
        
        private UICWindowssystem32cmdeWindow mUICWindowssystem32cmdeWindow;
        
        private UIStartWindow mUIStartWindow;
        
        private UIMozillaFirefoxWindow mUIMozillaFirefoxWindow;
        
        private UICommandPromptWindow mUICommandPromptWindow;
        
        private UIRunWindow mUIRunWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Extensive'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ExtensiveParams
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + e'
        /// </summary>
        public string SendKeys = "e";
        
        /// <summary>
        /// Type 'C' in 'Select C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UISelectCWindowssystemClientSendKeys = "C";
        
        /// <summary>
        /// Type 'lient{LShiftKey}Serr{Back}{Back}rver{Space}-u{Space}s{Enter}' in 'C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UICWindowssystem32cmdeClientSendKeys = "lient{LShiftKey}Serr{Back}{Back}rver{Space}-u{Space}s{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'test'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class testParams
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + r'
        /// </summary>
        public string SendKeys = "r";
        
        /// <summary>
        /// Select 'cmd' in 'Open:' combo box
        /// </summary>
        public string UIOpenComboBoxEditableItem = "cmd";
        
        /// <summary>
        /// Type '{Enter}' in 'Open:' text box
        /// </summary>
        public string UIOpenEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'ping{Enter}' in 'C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UICWindowssystem32cmdeClientSendKeys = "ping{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'test_cmd'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class test_cmdParams
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys '{LWin}'
        /// </summary>
        public string SendKeys = "{LWin}";
        
        /// <summary>
        /// Type 'tree{Enter}' in 'Command Prompt' client
        /// </summary>
        public string UICommandPromptClientSendKeys = "tree{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIWpfWindow : WpfWindow
    {
        
        public UIWpfWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WpfButton UISTARTButton
        {
            get
            {
                if ((this.mUISTARTButton == null))
                {
                    this.mUISTARTButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISTARTButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Button_Start";
                    #endregion
                }
                return this.mUISTARTButton;
            }
        }
        
        public WpfButton UIRESTARTButton
        {
            get
            {
                if ((this.mUIRESTARTButton == null))
                {
                    this.mUIRESTARTButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRESTARTButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Button_Restart";
                    #endregion
                }
                return this.mUIRESTARTButton;
            }
        }
        
        public WpfButton UIRButton
        {
            get
            {
                if ((this.mUIRButton == null))
                {
                    this.mUIRButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Button_Random";
                    #endregion
                }
                return this.mUIRButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUISTARTButton;
        
        private WpfButton mUIRESTARTButton;
        
        private WpfButton mUIRButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UIItem2InterimReportListItem
        {
            get
            {
                if ((this.mUIItem2InterimReportListItem == null))
                {
                    this.mUIItem2InterimReportListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIItem2InterimReportListItem.SearchProperties[WinListItem.PropertyNames.Name] = "2 - Interim Report";
                    this.mUIItem2InterimReportListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIItem2InterimReportListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIItem2InterimReportListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItem2InterimReportWindow : WinWindow
    {
        
        public UIItem2InterimReportWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "2 - Interim Report";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("2 - Interim Report");
            #endregion
        }
        
        #region Properties
        public UIItem2InterimReportTitleBar UIItem2InterimReportTitleBar
        {
            get
            {
                if ((this.mUIItem2InterimReportTitleBar == null))
                {
                    this.mUIItem2InterimReportTitleBar = new UIItem2InterimReportTitleBar(this);
                }
                return this.mUIItem2InterimReportTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItem2InterimReportTitleBar mUIItem2InterimReportTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItem2InterimReportTitleBar : WinTitleBar
    {
        
        public UIItem2InterimReportTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("2 - Interim Report");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("2 - Interim Report");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFileExplorerWindow : WinWindow
    {
        
        public UIFileExplorerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "File Explorer";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("File Explorer");
            this.WindowTitles.Add("GitHub");
            this.WindowTitles.Add("Dissertation_Project");
            this.WindowTitles.Add("ClientServer");
            this.WindowTitles.Add("bin");
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIItemWindow5 UIItemWindow5
        {
            get
            {
                if ((this.mUIItemWindow5 == null))
                {
                    this.mUIItemWindow5 = new UIItemWindow5(this);
                }
                return this.mUIItemWindow5;
            }
        }
        
        public UIShellViewWindow UIShellViewWindow
        {
            get
            {
                if ((this.mUIShellViewWindow == null))
                {
                    this.mUIShellViewWindow = new UIShellViewWindow(this);
                }
                return this.mUIShellViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIItemWindow5 mUIItemWindow5;
        
        private UIShellViewWindow mUIShellViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("File Explorer");
            #endregion
        }
        
        #region Properties
        public UIQuickaccessTreeItem UIQuickaccessTreeItem
        {
            get
            {
                if ((this.mUIQuickaccessTreeItem == null))
                {
                    this.mUIQuickaccessTreeItem = new UIQuickaccessTreeItem(this);
                }
                return this.mUIQuickaccessTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIQuickaccessTreeItem mUIQuickaccessTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIQuickaccessTreeItem : WinTreeItem
    {
        
        public UIQuickaccessTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Quick access";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("File Explorer");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIGitHubpinnedTreeItem
        {
            get
            {
                if ((this.mUIGitHubpinnedTreeItem == null))
                {
                    this.mUIGitHubpinnedTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIGitHubpinnedTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "GitHub (pinned)";
                    this.mUIGitHubpinnedTreeItem.SearchProperties["Value"] = "1";
                    this.mUIGitHubpinnedTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIGitHubpinnedTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIGitHubpinnedTreeItem.WindowTitles.Add("File Explorer");
                    #endregion
                }
                return this.mUIGitHubpinnedTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIGitHubpinnedTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("GitHub");
            #endregion
        }
        
        #region Properties
        public UIDissertation_ProjectListItem UIDissertation_ProjectListItem
        {
            get
            {
                if ((this.mUIDissertation_ProjectListItem == null))
                {
                    this.mUIDissertation_ProjectListItem = new UIDissertation_ProjectListItem(this);
                }
                return this.mUIDissertation_ProjectListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDissertation_ProjectListItem mUIDissertation_ProjectListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDissertation_ProjectListItem : WinListItem
    {
        
        public UIDissertation_ProjectListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Dissertation_Project";
            this.WindowTitles.Add("GitHub");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("GitHub");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Dissertation_Project");
            #endregion
        }
        
        #region Properties
        public UIClientServerListItem UIClientServerListItem
        {
            get
            {
                if ((this.mUIClientServerListItem == null))
                {
                    this.mUIClientServerListItem = new UIClientServerListItem(this);
                }
                return this.mUIClientServerListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIClientServerListItem mUIClientServerListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIClientServerListItem : WinListItem
    {
        
        public UIClientServerListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "ClientServer";
            this.WindowTitles.Add("Dissertation_Project");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Dissertation_Project");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("ClientServer");
            #endregion
        }
        
        #region Properties
        public UIClientServerListItem1 UIClientServerListItem
        {
            get
            {
                if ((this.mUIClientServerListItem == null))
                {
                    this.mUIClientServerListItem = new UIClientServerListItem1(this);
                }
                return this.mUIClientServerListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIClientServerListItem1 mUIClientServerListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIClientServerListItem1 : WinListItem
    {
        
        public UIClientServerListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "ClientServer";
            this.WindowTitles.Add("ClientServer");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("ClientServer");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("ClientServer");
            #endregion
        }
        
        #region Properties
        public UIBinListItem UIBinListItem
        {
            get
            {
                if ((this.mUIBinListItem == null))
                {
                    this.mUIBinListItem = new UIBinListItem(this);
                }
                return this.mUIBinListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIBinListItem mUIBinListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBinListItem : WinListItem
    {
        
        public UIBinListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "bin";
            this.WindowTitles.Add("ClientServer");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("ClientServer");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public UIDebugListItem UIDebugListItem
        {
            get
            {
                if ((this.mUIDebugListItem == null))
                {
                    this.mUIDebugListItem = new UIDebugListItem(this);
                }
                return this.mUIDebugListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDebugListItem mUIDebugListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugListItem : WinListItem
    {
        
        public UIDebugListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Debug";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("bin");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIClientServerListItem2 UIClientServerListItem
        {
            get
            {
                if ((this.mUIClientServerListItem == null))
                {
                    this.mUIClientServerListItem = new UIClientServerListItem2(this);
                }
                return this.mUIClientServerListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIClientServerListItem2 mUIClientServerListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIClientServerListItem2 : WinListItem
    {
        
        public UIClientServerListItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "ClientServer";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIShellViewWindow : WinWindow
    {
        
        public UIShellViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ShellView";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "SHELLDLL_DefView";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIShellViewClient UIShellViewClient
        {
            get
            {
                if ((this.mUIShellViewClient == null))
                {
                    this.mUIShellViewClient = new UIShellViewClient(this);
                }
                return this.mUIShellViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIShellViewClient mUIShellViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIShellViewClient : WinClient
    {
        
        public UIShellViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Shell Folder View";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemsViewList.SearchProperties[WinList.PropertyNames.Name] = "Items View";
                    this.mUIItemsViewList.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Context";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32768";
            #endregion
        }
        
        #region Properties
        public UIContextMenu UIContextMenu
        {
            get
            {
                if ((this.mUIContextMenu == null))
                {
                    this.mUIContextMenu = new UIContextMenu(this);
                }
                return this.mUIContextMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIContextMenu mUIContextMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContextMenu : WinMenu
    {
        
        public UIContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Context";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpencommandwindowherMenuItem
        {
            get
            {
                if ((this.mUIOpencommandwindowherMenuItem == null))
                {
                    this.mUIOpencommandwindowherMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpencommandwindowherMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open command window here";
                    #endregion
                }
                return this.mUIOpencommandwindowherMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpencommandwindowherMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICWindowssystem32cmdeWindow : WinWindow
    {
        
        public UICWindowssystem32cmdeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Windows\\system32\\cmd.exe";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ConsoleWindowClass";
            this.WindowTitles.Add("C:\\Windows\\system32\\cmd.exe");
            this.WindowTitles.Add("Select C:\\Windows\\system32\\cmd.exe");
            #endregion
        }
        
        #region Properties
        public WinClient UICWindowssystem32cmdeClient
        {
            get
            {
                if ((this.mUICWindowssystem32cmdeClient == null))
                {
                    this.mUICWindowssystem32cmdeClient = new WinClient(this);
                    #region Search Criteria
                    this.mUICWindowssystem32cmdeClient.SearchProperties[WinControl.PropertyNames.Name] = "C:\\Windows\\system32\\cmd.exe";
                    this.mUICWindowssystem32cmdeClient.WindowTitles.Add("C:\\Windows\\system32\\cmd.exe");
                    #endregion
                }
                return this.mUICWindowssystem32cmdeClient;
            }
        }
        
        public WinClient UISelectCWindowssystemClient
        {
            get
            {
                if ((this.mUISelectCWindowssystemClient == null))
                {
                    this.mUISelectCWindowssystemClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISelectCWindowssystemClient.SearchProperties[WinControl.PropertyNames.Name] = "Select C:\\Windows\\system32\\cmd.exe";
                    this.mUISelectCWindowssystemClient.WindowTitles.Add("Select C:\\Windows\\system32\\cmd.exe");
                    #endregion
                }
                return this.mUISelectCWindowssystemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUICWindowssystem32cmdeClient;
        
        private WinClient mUISelectCWindowssystemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStartWindow : WinWindow
    {
        
        public UIStartWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Start";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Start";
            this.WindowTitles.Add("Start");
            #endregion
        }
        
        #region Properties
        public WinButton UIStartButton
        {
            get
            {
                if ((this.mUIStartButton == null))
                {
                    this.mUIStartButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIStartButton.SearchProperties[WinButton.PropertyNames.Name] = "Start";
                    this.mUIStartButton.WindowTitles.Add("Start");
                    #endregion
                }
                return this.mUIStartButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIStartButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMozillaFirefoxWindow : WinWindow
    {
        
        public UIMozillaFirefoxWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UINavigationToolbarToolBar UINavigationToolbarToolBar
        {
            get
            {
                if ((this.mUINavigationToolbarToolBar == null))
                {
                    this.mUINavigationToolbarToolBar = new UINavigationToolbarToolBar(this);
                }
                return this.mUINavigationToolbarToolBar;
            }
        }
        
        public UIItemComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new UIItemComboBox(this);
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private UINavigationToolbarToolBar mUINavigationToolbarToolBar;
        
        private UIItemComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINavigationToolbarToolBar : WinToolBar
    {
        
        public UINavigationToolbarToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Navigation Toolbar";
            this.WindowTitles.Add("Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.SearchProperties[WinComboBox.PropertyNames.Instance] = "2";
                    this.mUIItemComboBox.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemComboBox : WinComboBox
    {
        
        public UIItemComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UISearchusingDuckDuckGEdit
        {
            get
            {
                if ((this.mUISearchusingDuckDuckGEdit == null))
                {
                    this.mUISearchusingDuckDuckGEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISearchusingDuckDuckGEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Search using DuckDuckGo";
                    this.mUISearchusingDuckDuckGEdit.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUISearchusingDuckDuckGEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUISearchusingDuckDuckGEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICommandPromptWindow : WinWindow
    {
        
        public UICommandPromptWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Command Prompt";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ConsoleWindowClass";
            this.WindowTitles.Add("Command Prompt");
            #endregion
        }
        
        #region Properties
        public WinClient UICommandPromptClient
        {
            get
            {
                if ((this.mUICommandPromptClient == null))
                {
                    this.mUICommandPromptClient = new WinClient(this);
                    #region Search Criteria
                    this.mUICommandPromptClient.SearchProperties[WinControl.PropertyNames.Name] = "Command Prompt";
                    this.mUICommandPromptClient.WindowTitles.Add("Command Prompt");
                    #endregion
                }
                return this.mUICommandPromptClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUICommandPromptClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRunWindow : WinWindow
    {
        
        public UIRunWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Run";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public UIItemWindow7 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow7(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow7 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12298";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIOpenComboBox
        {
            get
            {
                if ((this.mUIOpenComboBox == null))
                {
                    this.mUIOpenComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIOpenComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Open:";
                    this.mUIOpenComboBox.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIOpenComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinEdit UIOpenEdit
        {
            get
            {
                if ((this.mUIOpenEdit == null))
                {
                    this.mUIOpenEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open:";
                    this.mUIOpenEdit.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIOpenEdit;
        #endregion
    }
}
