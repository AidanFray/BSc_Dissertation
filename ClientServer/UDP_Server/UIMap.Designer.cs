// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UDP
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// test - Use 'testParams' to pass parameters into this method.
        /// </summary>
        public void test()
        {
            #region Variable Declarations
            WinComboBox uIOpenComboBox = this.UIRunWindow.UIItemWindow.UIOpenComboBox;
            WinEdit uIOpenEdit = this.UIRunWindow.UIItemWindow1.UIOpenEdit;
            WinClient uICWindowssystem32cmdeClient = this.UICWindowssystem32cmdeWindow.UICWindowssystem32cmdeClient;
            #endregion

            // Press keyboard shortcut keys 'Windows + r'
            Keyboard.SendKeys(this.testParams.SendKeys, ModifierKeys.Windows);

            // Select 'cmd' in 'Open:' combo box
            uIOpenComboBox.EditableItem = this.testParams.UIOpenComboBoxEditableItem;

            // Type '{Enter}' in 'Open:' text box
            Keyboard.SendKeys(uIOpenEdit, this.testParams.UIOpenEditSendKeys, ModifierKeys.None);

            // Type 'ping{Space}127.0.0.1{Enter}{LControlKey}' in 'C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uICWindowssystem32cmdeClient, this.testParams.UICWindowssystem32cmdeClientSendKeys, ModifierKeys.None);

            // Type 'Control + c' in 'C:\Windows\system32\cmd.exe' client
            Keyboard.SendKeys(uICWindowssystem32cmdeClient, this.testParams.UICWindowssystem32cmdeClientSendKeys1, ModifierKeys.Control);
        }
        
        /// <summary>
        /// RecordedMethod1
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIUDP_serverListItem.UINameEdit;
            WpfButton uISTARTButton = this.UIWpfWindow.UISTARTButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(51, 6));

            // Click 'START' button
            Mouse.Click(uISTARTButton, new Point(197, 6));
        }
        
        /// <summary>
        /// udp_test
        /// </summary>
        public void udp_test()
        {
            #region Variable Declarations
            WpfButton uISTARTButton = this.UIWpfWindow.UISTARTButton;
            #endregion

            // Click 'START' button
            Mouse.Click(uISTARTButton, new Point(223, 12));

            // Click 'START' button
            Mouse.Click(uISTARTButton, new Point(213, 0));
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {

            // Launch '%USERPROFILE%\Documents\GitHub\Dissertation_Project\ClientServer\ClientServer\bin\Debug\ClientServer.exe' with arguments '-u s'
            ApplicationUnderTest clientServerApplication = ApplicationUnderTest.Launch(this.RecordedMethod2Params.ExePath, this.RecordedMethod2Params.AlternateExePath, "-u s");
        }
        
        /// <summary>
        /// RecordedMethod3
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WpfButton uISTARTButton = this.UIUDPWindow.UISTARTButton;
            #endregion

            // Click 'START' button
            Mouse.Click(uISTARTButton, new Point(132, 11));
        }
        
        /// <summary>
        /// Start_Stop
        /// </summary>
        public void Start_Stop()
        {
            #region Variable Declarations
            WpfButton uISTARTButton = this.UIUDPWindow.UISTARTButton;
            WinButton uICloseButton = this.UIUDPWindow1.UICloseButton;
            #endregion

            // Click 'START' button
            Mouse.Click(uISTARTButton, new Point(179, 22));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 16));
        }
        
        /// <summary>
        /// Randomise
        /// </summary>
        public void Randomise()
        {
            #region Variable Declarations
            WpfButton uIRButton = this.UIUDPWindow.UIRButton;
            #endregion

            // Click 'R' button
            Mouse.Click(uIRButton, new Point(6, 12));
        }
        
        /// <summary>
        /// Start
        /// </summary>
        public void Start()
        {
            #region Variable Declarations
            WpfButton uISTARTButton = this.UIUDPWindow.UISTARTButton;
            #endregion

            // Click 'START' button
            Mouse.Click(uISTARTButton, new Point(183, 6));
        }
        
        /// <summary>
        /// StartAndWait
        /// </summary>
        public void StartAndWait()
        {
            #region Variable Declarations
            WpfButton uISTARTButton = this.UIUDPWindow.UISTARTButton;
            #endregion

            // Click 'START' button
            Mouse.Click(uISTARTButton, new Point(71, 7));
        }
        
        /// <summary>
        /// CheckForValue - Use 'CheckForValueExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckForValue()
        {
            #region Variable Declarations
            WpfText uIItemText1 = this.UIUDPWindow.UIItemText.UIItemText1;
            #endregion

            // Verify that the 'ControlType' property of '-' label equals '100%'
            Assert.AreEqual(this.CheckForValueExpectedValues.UIItemText1ControlType, uIItemText1.ControlType.ToString());
        }
        
        /// <summary>
        /// Control_Check - Use 'Control_CheckExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Control_Check()
        {
            #region Variable Declarations
            WpfButton uIRESTARTButton = this.UIUDPWindow.UIRESTARTButton;
            WpfButton uISTARTButton = this.UIUDPWindow.UISTARTButton;
            #endregion

            // Verify that the 'Enabled' property of 'RESTART' button equals 'True'
            Assert.AreEqual(this.Control_CheckExpectedValues.UIRESTARTButtonEnabled, uIRESTARTButton.Enabled, "Restart button isn\'t active");

            // Verify that the 'Enabled' property of 'START' button equals 'False'
            Assert.AreEqual(this.Control_CheckExpectedValues.UISTARTButtonEnabled, uISTARTButton.Enabled, "Start button after clicked isn\'t disabled");
        }
        
        /// <summary>
        /// Close
        /// </summary>
        public void Close()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIUDPWindow1.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(9, 8));
        }
        
        /// <summary>
        /// Restart_Click
        /// </summary>
        public void Restart_Click()
        {
            #region Variable Declarations
            WpfButton uIRESTARTButton = this.UIUDPWindow.UIRESTARTButton;
            #endregion

            // Click 'RESTART' button
            Mouse.Click(uIRESTARTButton, new Point(224, 14));
        }
        
        /// <summary>
        /// Start_Click
        /// </summary>
        public void Start_Click()
        {
            #region Variable Declarations
            WpfButton uISTARTButton = this.UIUDPWindow.UISTARTButton;
            #endregion

            // Click 'START' button
            Mouse.Click(uISTARTButton, new Point(107, 7));
        }
        
        /// <summary>
        /// Restart_InvertCheck - Use 'Restart_InvertCheckExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Restart_InvertCheck()
        {
            #region Variable Declarations
            WpfButton uISTARTButton = this.UIUDPWindow.UISTARTButton;
            WpfButton uIRESTARTButton = this.UIUDPWindow.UIRESTARTButton;
            #endregion

            // Verify that the 'Enabled' property of 'START' button equals 'True'
            Assert.AreEqual(this.Restart_InvertCheckExpectedValues.UISTARTButtonEnabled, uISTARTButton.Enabled, "Start button isn\'t active");

            // Verify that the 'Enabled' property of 'RESTART' button equals 'False'
            Assert.AreEqual(this.Restart_InvertCheckExpectedValues.UIRESTARTButtonEnabled, uIRESTARTButton.Enabled, "Restart button isn\'t inactive");
        }
        
        /// <summary>
        /// Start_InvertCheck - Use 'Start_InvertCheckExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Start_InvertCheck()
        {
            #region Variable Declarations
            WpfButton uISTARTButton = this.UIUDPWindow.UISTARTButton;
            WpfButton uIRESTARTButton = this.UIUDPWindow.UIRESTARTButton;
            #endregion

            // Verify that the 'Enabled' property of 'START' button equals 'False'
            Assert.AreEqual(this.Start_InvertCheckExpectedValues.UISTARTButtonEnabled, uISTARTButton.Enabled);

            // Verify that the 'Enabled' property of 'RESTART' button equals 'True'
            Assert.AreEqual(this.Start_InvertCheckExpectedValues.UIRESTARTButtonEnabled, uIRESTARTButton.Enabled);
        }
        
        /// <summary>
        /// Assert_CheckPacketLossValue - Use 'Assert_CheckPacketLossValueExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_CheckPacketLossValue()
        {
            #region Variable Declarations
            WpfText uIItemText = this.UIUDPWindow.UIItemText;
            #endregion

            // Verify that the 'DisplayText' property of '-' label equals '100%'
            Assert.AreEqual(this.Assert_CheckPacketLossValueExpectedValues.UIItemTextDisplayText, uIItemText.DisplayText, "Packet loss value is incorrect");
        }
        
        /// <summary>
        /// Assert_CheckPacketLossValueReset - Use 'Assert_CheckPacketLossValueResetExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_CheckPacketLossValueReset()
        {
            #region Variable Declarations
            WpfText uIItemText1 = this.UIUDPWindow.UIItemText.UIItemText1;
            #endregion

            // Verify that the 'DisplayText' property of '-' label equals '-'
            Assert.AreEqual(this.Assert_CheckPacketLossValueResetExpectedValues.UIItemText1DisplayText, uIItemText1.DisplayText);
        }
        
        /// <summary>
        /// Broken - Use 'BrokenExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Broken()
        {
            #region Variable Declarations
            WpfText uIItemText2 = this.UIUDPWindow.UIItemText2;
            #endregion

            // Verify that the 'DisplayText' property of '-' label equals '-'
            Assert.AreEqual(this.BrokenExpectedValues.UIItemText2DisplayText, uIItemText2.DisplayText);
        }
        
        /// <summary>
        /// Assert_CheckTotalPacketsValueReset - Use 'Assert_CheckTotalPacketsValueResetExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_CheckTotalPacketsValueReset()
        {
            #region Variable Declarations
            WpfText uIItemText2 = this.UIUDPWindow.UIItemText2;
            #endregion

            // Verify that the 'DisplayText' property of '-' label equals '-'
            Assert.AreEqual(this.Assert_CheckTotalPacketsValueResetExpectedValues.UIItemText2DisplayText, uIItemText2.DisplayText);
        }
        
        /// <summary>
        /// Assert_CheckTotalSentValueReset - Use 'Assert_CheckTotalSentValueResetExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_CheckTotalSentValueReset()
        {
            #region Variable Declarations
            WpfText uIItemText1 = this.UIUDPWindow.UIItemText1;
            #endregion

            // Verify that the 'DisplayText' property of '-' label equals '-'
            Assert.AreEqual(this.Assert_CheckTotalSentValueResetExpectedValues.UIItemText1DisplayText, uIItemText1.DisplayText);
        }
        
        #region Properties
        public virtual testParams testParams
        {
            get
            {
                if ((this.mtestParams == null))
                {
                    this.mtestParams = new testParams();
                }
                return this.mtestParams;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual CheckForValueExpectedValues CheckForValueExpectedValues
        {
            get
            {
                if ((this.mCheckForValueExpectedValues == null))
                {
                    this.mCheckForValueExpectedValues = new CheckForValueExpectedValues();
                }
                return this.mCheckForValueExpectedValues;
            }
        }
        
        public virtual Control_CheckExpectedValues Control_CheckExpectedValues
        {
            get
            {
                if ((this.mControl_CheckExpectedValues == null))
                {
                    this.mControl_CheckExpectedValues = new Control_CheckExpectedValues();
                }
                return this.mControl_CheckExpectedValues;
            }
        }
        
        public virtual Restart_InvertCheckExpectedValues Restart_InvertCheckExpectedValues
        {
            get
            {
                if ((this.mRestart_InvertCheckExpectedValues == null))
                {
                    this.mRestart_InvertCheckExpectedValues = new Restart_InvertCheckExpectedValues();
                }
                return this.mRestart_InvertCheckExpectedValues;
            }
        }
        
        public virtual Start_InvertCheckExpectedValues Start_InvertCheckExpectedValues
        {
            get
            {
                if ((this.mStart_InvertCheckExpectedValues == null))
                {
                    this.mStart_InvertCheckExpectedValues = new Start_InvertCheckExpectedValues();
                }
                return this.mStart_InvertCheckExpectedValues;
            }
        }
        
        public virtual Assert_CheckPacketLossValueExpectedValues Assert_CheckPacketLossValueExpectedValues
        {
            get
            {
                if ((this.mAssert_CheckPacketLossValueExpectedValues == null))
                {
                    this.mAssert_CheckPacketLossValueExpectedValues = new Assert_CheckPacketLossValueExpectedValues();
                }
                return this.mAssert_CheckPacketLossValueExpectedValues;
            }
        }
        
        public virtual Assert_CheckPacketLossValueResetExpectedValues Assert_CheckPacketLossValueResetExpectedValues
        {
            get
            {
                if ((this.mAssert_CheckPacketLossValueResetExpectedValues == null))
                {
                    this.mAssert_CheckPacketLossValueResetExpectedValues = new Assert_CheckPacketLossValueResetExpectedValues();
                }
                return this.mAssert_CheckPacketLossValueResetExpectedValues;
            }
        }
        
        public virtual BrokenExpectedValues BrokenExpectedValues
        {
            get
            {
                if ((this.mBrokenExpectedValues == null))
                {
                    this.mBrokenExpectedValues = new BrokenExpectedValues();
                }
                return this.mBrokenExpectedValues;
            }
        }
        
        public virtual Assert_CheckTotalPacketsValueResetExpectedValues Assert_CheckTotalPacketsValueResetExpectedValues
        {
            get
            {
                if ((this.mAssert_CheckTotalPacketsValueResetExpectedValues == null))
                {
                    this.mAssert_CheckTotalPacketsValueResetExpectedValues = new Assert_CheckTotalPacketsValueResetExpectedValues();
                }
                return this.mAssert_CheckTotalPacketsValueResetExpectedValues;
            }
        }
        
        public virtual Assert_CheckTotalSentValueResetExpectedValues Assert_CheckTotalSentValueResetExpectedValues
        {
            get
            {
                if ((this.mAssert_CheckTotalSentValueResetExpectedValues == null))
                {
                    this.mAssert_CheckTotalSentValueResetExpectedValues = new Assert_CheckTotalSentValueResetExpectedValues();
                }
                return this.mAssert_CheckTotalSentValueResetExpectedValues;
            }
        }
        
        public UIRunWindow UIRunWindow
        {
            get
            {
                if ((this.mUIRunWindow == null))
                {
                    this.mUIRunWindow = new UIRunWindow();
                }
                return this.mUIRunWindow;
            }
        }
        
        public UICWindowssystem32cmdeWindow UICWindowssystem32cmdeWindow
        {
            get
            {
                if ((this.mUICWindowssystem32cmdeWindow == null))
                {
                    this.mUICWindowssystem32cmdeWindow = new UICWindowssystem32cmdeWindow();
                }
                return this.mUICWindowssystem32cmdeWindow;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIWpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new UIWpfWindow();
                }
                return this.mUIWpfWindow;
            }
        }
        
        public UIUDPWindow UIUDPWindow
        {
            get
            {
                if ((this.mUIUDPWindow == null))
                {
                    this.mUIUDPWindow = new UIUDPWindow();
                }
                return this.mUIUDPWindow;
            }
        }
        
        public UIUDPWindow1 UIUDPWindow1
        {
            get
            {
                if ((this.mUIUDPWindow1 == null))
                {
                    this.mUIUDPWindow1 = new UIUDPWindow1();
                }
                return this.mUIUDPWindow1;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        #endregion
        
        #region Fields
        private testParams mtestParams;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private CheckForValueExpectedValues mCheckForValueExpectedValues;
        
        private Control_CheckExpectedValues mControl_CheckExpectedValues;
        
        private Restart_InvertCheckExpectedValues mRestart_InvertCheckExpectedValues;
        
        private Start_InvertCheckExpectedValues mStart_InvertCheckExpectedValues;
        
        private Assert_CheckPacketLossValueExpectedValues mAssert_CheckPacketLossValueExpectedValues;
        
        private Assert_CheckPacketLossValueResetExpectedValues mAssert_CheckPacketLossValueResetExpectedValues;
        
        private BrokenExpectedValues mBrokenExpectedValues;
        
        private Assert_CheckTotalPacketsValueResetExpectedValues mAssert_CheckTotalPacketsValueResetExpectedValues;
        
        private Assert_CheckTotalSentValueResetExpectedValues mAssert_CheckTotalSentValueResetExpectedValues;
        
        private UIRunWindow mUIRunWindow;
        
        private UICWindowssystem32cmdeWindow mUICWindowssystem32cmdeWindow;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIWpfWindow mUIWpfWindow;
        
        private UIUDPWindow mUIUDPWindow;
        
        private UIUDPWindow1 mUIUDPWindow1;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'test'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class testParams
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + r'
        /// </summary>
        public string SendKeys = "r";
        
        /// <summary>
        /// Select 'cmd' in 'Open:' combo box
        /// </summary>
        public string UIOpenComboBoxEditableItem = "cmd";
        
        /// <summary>
        /// Type '{Enter}' in 'Open:' text box
        /// </summary>
        public string UIOpenEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'ping{Space}127.0.0.1{Enter}{LControlKey}' in 'C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UICWindowssystem32cmdeClientSendKeys = "ping{Space}127.0.0.1{Enter}{LControlKey}";
        
        /// <summary>
        /// Type 'Control + c' in 'C:\Windows\system32\cmd.exe' client
        /// </summary>
        public string UICWindowssystem32cmdeClientSendKeys1 = "c";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\GitHub\Dissertation_Project\ClientServer\ClientServer\bin\Debug\ClientServer.exe' with arguments '-u s'
        /// </summary>
        public string ExePath = "C:\\Users\\User\\Documents\\GitHub\\Dissertation_Project\\ClientServer\\ClientServer\\bin" +
            "\\Debug\\ClientServer.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\GitHub\Dissertation_Project\ClientServer\ClientServer\bin\Debug\ClientServer.exe' with arguments '-u s'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Documents\\GitHub\\Dissertation_Project\\ClientServer\\ClientServer\\bin" +
            "\\Debug\\ClientServer.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckForValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckForValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of '-' label equals '100%'
        /// </summary>
        public string UIItemText1ControlType = "100%";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Control_Check'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Control_CheckExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'RESTART' button equals 'True'
        /// </summary>
        public bool UIRESTARTButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'START' button equals 'False'
        /// </summary>
        public bool UISTARTButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Restart_InvertCheck'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Restart_InvertCheckExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'START' button equals 'True'
        /// </summary>
        public bool UISTARTButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'RESTART' button equals 'False'
        /// </summary>
        public bool UIRESTARTButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Start_InvertCheck'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Start_InvertCheckExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'START' button equals 'False'
        /// </summary>
        public bool UISTARTButtonEnabled = false;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'RESTART' button equals 'True'
        /// </summary>
        public bool UIRESTARTButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_CheckPacketLossValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Assert_CheckPacketLossValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '-' label equals '100%'
        /// </summary>
        public string UIItemTextDisplayText = "100%";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_CheckPacketLossValueReset'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Assert_CheckPacketLossValueResetExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '-' label equals '-'
        /// </summary>
        public string UIItemText1DisplayText = "-";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Broken'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class BrokenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '-' label equals '-'
        /// </summary>
        public string UIItemText2DisplayText = "-";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_CheckTotalPacketsValueReset'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Assert_CheckTotalPacketsValueResetExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '-' label equals '-'
        /// </summary>
        public string UIItemText2DisplayText = "-";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_CheckTotalSentValueReset'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Assert_CheckTotalSentValueResetExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '-' label equals '-'
        /// </summary>
        public string UIItemText1DisplayText = "-";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRunWindow : WinWindow
    {
        
        public UIRunWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Run";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12298";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIOpenComboBox
        {
            get
            {
                if ((this.mUIOpenComboBox == null))
                {
                    this.mUIOpenComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIOpenComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Open:";
                    this.mUIOpenComboBox.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIOpenComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinEdit UIOpenEdit
        {
            get
            {
                if ((this.mUIOpenEdit == null))
                {
                    this.mUIOpenEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open:";
                    this.mUIOpenEdit.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIOpenEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICWindowssystem32cmdeWindow : WinWindow
    {
        
        public UICWindowssystem32cmdeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Windows\\system32\\cmd.exe";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ConsoleWindowClass";
            this.WindowTitles.Add("C:\\Windows\\system32\\cmd.exe");
            this.WindowTitles.Add("C:\\Windows\\system32\\cmd.exe - ping  127.0.0.1");
            #endregion
        }
        
        #region Properties
        public WinClient UICWindowssystem32cmdeClient
        {
            get
            {
                if ((this.mUICWindowssystem32cmdeClient == null))
                {
                    this.mUICWindowssystem32cmdeClient = new WinClient(this);
                    #region Search Criteria
                    this.mUICWindowssystem32cmdeClient.SearchProperties[WinControl.PropertyNames.Name] = "C:\\Windows\\system32\\cmd.exe";
                    this.mUICWindowssystem32cmdeClient.WindowTitles.Add("C:\\Windows\\system32\\cmd.exe");
                    this.mUICWindowssystem32cmdeClient.WindowTitles.Add("C:\\Windows\\system32\\cmd.exe - ping  127.0.0.1");
                    #endregion
                }
                return this.mUICWindowssystem32cmdeClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUICWindowssystem32cmdeClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            this.WindowTitles.Add("File Explorer");
            this.WindowTitles.Add("GitHub");
            this.WindowTitles.Add("Dissertation_Project");
            this.WindowTitles.Add("ClientServer");
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIAddressCUsersUserDocWindow UIAddressCUsersUserDocWindow
        {
            get
            {
                if ((this.mUIAddressCUsersUserDocWindow == null))
                {
                    this.mUIAddressCUsersUserDocWindow = new UIAddressCUsersUserDocWindow(this);
                }
                return this.mUIAddressCUsersUserDocWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIItemWindow5 UIItemWindow5
        {
            get
            {
                if ((this.mUIItemWindow5 == null))
                {
                    this.mUIItemWindow5 = new UIItemWindow5(this);
                }
                return this.mUIItemWindow5;
            }
        }
        
        public UIItemWindow6 UIItemWindow6
        {
            get
            {
                if ((this.mUIItemWindow6 == null))
                {
                    this.mUIItemWindow6 = new UIItemWindow6(this);
                }
                return this.mUIItemWindow6;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow21 mUIItemWindow2;
        
        private UIAddressCUsersUserDocWindow mUIAddressCUsersUserDocWindow;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIItemWindow5 mUIItemWindow5;
        
        private UIItemWindow6 mUIItemWindow6;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            this.WindowTitles.Add("GitHub");
            #endregion
        }
        
        #region Properties
        public UIUDP_serverListItem UIUDP_serverListItem
        {
            get
            {
                if ((this.mUIUDP_serverListItem == null))
                {
                    this.mUIUDP_serverListItem = new UIUDP_serverListItem(this);
                }
                return this.mUIUDP_serverListItem;
            }
        }
        
        public UIDissertation_ProjectListItem UIDissertation_ProjectListItem
        {
            get
            {
                if ((this.mUIDissertation_ProjectListItem == null))
                {
                    this.mUIDissertation_ProjectListItem = new UIDissertation_ProjectListItem(this);
                }
                return this.mUIDissertation_ProjectListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUDP_serverListItem mUIUDP_serverListItem;
        
        private UIDissertation_ProjectListItem mUIDissertation_ProjectListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUDP_serverListItem : WinListItem
    {
        
        public UIUDP_serverListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UDP_server";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDissertation_ProjectListItem : WinListItem
    {
        
        public UIDissertation_ProjectListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Dissertation_Project";
            this.WindowTitles.Add("GitHub");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("GitHub");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("File Explorer");
            #endregion
        }
        
        #region Properties
        public UIQuickaccessTreeItem UIQuickaccessTreeItem
        {
            get
            {
                if ((this.mUIQuickaccessTreeItem == null))
                {
                    this.mUIQuickaccessTreeItem = new UIQuickaccessTreeItem(this);
                }
                return this.mUIQuickaccessTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIQuickaccessTreeItem mUIQuickaccessTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIQuickaccessTreeItem : WinTreeItem
    {
        
        public UIQuickaccessTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Quick access";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("File Explorer");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIGitHubpinnedTreeItem
        {
            get
            {
                if ((this.mUIGitHubpinnedTreeItem == null))
                {
                    this.mUIGitHubpinnedTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIGitHubpinnedTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "GitHub (pinned)";
                    this.mUIGitHubpinnedTreeItem.SearchProperties["Value"] = "1";
                    this.mUIGitHubpinnedTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIGitHubpinnedTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIGitHubpinnedTreeItem.WindowTitles.Add("File Explorer");
                    #endregion
                }
                return this.mUIGitHubpinnedTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIGitHubpinnedTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Dissertation_Project");
            #endregion
        }
        
        #region Properties
        public UIClientServerListItem UIClientServerListItem
        {
            get
            {
                if ((this.mUIClientServerListItem == null))
                {
                    this.mUIClientServerListItem = new UIClientServerListItem(this);
                }
                return this.mUIClientServerListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIClientServerListItem mUIClientServerListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIClientServerListItem : WinListItem
    {
        
        public UIClientServerListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "ClientServer";
            this.WindowTitles.Add("Dissertation_Project");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Dissertation_Project");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("ClientServer");
            #endregion
        }
        
        #region Properties
        public UIDebugListItem UIDebugListItem
        {
            get
            {
                if ((this.mUIDebugListItem == null))
                {
                    this.mUIDebugListItem = new UIDebugListItem(this);
                }
                return this.mUIDebugListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDebugListItem mUIDebugListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugListItem : WinListItem
    {
        
        public UIDebugListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Debug";
            this.WindowTitles.Add("ClientServer");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("ClientServer");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAddressCUsersUserDocWindow : WinWindow
    {
        
        public UIAddressCUsersUserDocWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIAddressCUsersUserDocToolBar UIAddressCUsersUserDocToolBar
        {
            get
            {
                if ((this.mUIAddressCUsersUserDocToolBar == null))
                {
                    this.mUIAddressCUsersUserDocToolBar = new UIAddressCUsersUserDocToolBar(this);
                }
                return this.mUIAddressCUsersUserDocToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIAddressCUsersUserDocToolBar mUIAddressCUsersUserDocToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAddressCUsersUserDocToolBar : WinToolBar
    {
        
        public UIAddressCUsersUserDocToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Address: C:\\Users\\User\\Documents\\GitHub\\Dissertation_Project\\ClientServer\\Debug";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIClientServerSplitButton
        {
            get
            {
                if ((this.mUIClientServerSplitButton == null))
                {
                    this.mUIClientServerSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIClientServerSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "‎ClientServer";
                    this.mUIClientServerSplitButton.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUIClientServerSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIClientServerSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("ClientServer");
            #endregion
        }
        
        #region Properties
        public UIClientServerListItem1 UIClientServerListItem
        {
            get
            {
                if ((this.mUIClientServerListItem == null))
                {
                    this.mUIClientServerListItem = new UIClientServerListItem1(this);
                }
                return this.mUIClientServerListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIClientServerListItem1 mUIClientServerListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIClientServerListItem1 : WinListItem
    {
        
        public UIClientServerListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "ClientServer";
            this.WindowTitles.Add("ClientServer");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("ClientServer");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("ClientServer");
            #endregion
        }
        
        #region Properties
        public UIHeaderList UIHeaderList
        {
            get
            {
                if ((this.mUIHeaderList == null))
                {
                    this.mUIHeaderList = new UIHeaderList(this);
                }
                return this.mUIHeaderList;
            }
        }
        
        public UIBinListItem UIBinListItem
        {
            get
            {
                if ((this.mUIBinListItem == null))
                {
                    this.mUIBinListItem = new UIBinListItem(this);
                }
                return this.mUIBinListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderList mUIHeaderList;
        
        private UIBinListItem mUIBinListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIHeaderList : WinList
    {
        
        public UIHeaderList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Header";
            this.WindowTitles.Add("ClientServer");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UINameSplitButton
        {
            get
            {
                if ((this.mUINameSplitButton == null))
                {
                    this.mUINameSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUINameSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Name";
                    this.mUINameSplitButton.WindowTitles.Add("ClientServer");
                    #endregion
                }
                return this.mUINameSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUINameSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBinListItem : WinListItem
    {
        
        public UIBinListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "bin";
            this.WindowTitles.Add("ClientServer");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("ClientServer");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public UIDebugListItem1 UIDebugListItem
        {
            get
            {
                if ((this.mUIDebugListItem == null))
                {
                    this.mUIDebugListItem = new UIDebugListItem1(this);
                }
                return this.mUIDebugListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDebugListItem1 mUIDebugListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugListItem1 : WinListItem
    {
        
        public UIDebugListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Debug";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("bin");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIUDP_serverListItem1 UIUDP_serverListItem
        {
            get
            {
                if ((this.mUIUDP_serverListItem == null))
                {
                    this.mUIUDP_serverListItem = new UIUDP_serverListItem1(this);
                }
                return this.mUIUDP_serverListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUDP_serverListItem1 mUIUDP_serverListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUDP_serverListItem1 : WinListItem
    {
        
        public UIUDP_serverListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UDP_server";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIWpfWindow : WpfWindow
    {
        
        public UIWpfWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WpfButton UISTARTButton
        {
            get
            {
                if ((this.mUISTARTButton == null))
                {
                    this.mUISTARTButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISTARTButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Button_Start";
                    #endregion
                }
                return this.mUISTARTButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUISTARTButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUDPWindow : WpfWindow
    {
        
        public UIUDPWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "UDP";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("UDP");
            #endregion
        }
        
        #region Properties
        public WpfButton UISTARTButton
        {
            get
            {
                if ((this.mUISTARTButton == null))
                {
                    this.mUISTARTButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISTARTButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Button_Start";
                    this.mUISTARTButton.WindowTitles.Add("UDP");
                    #endregion
                }
                return this.mUISTARTButton;
            }
        }
        
        public WpfButton UIRButton
        {
            get
            {
                if ((this.mUIRButton == null))
                {
                    this.mUIRButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Button_Random";
                    this.mUIRButton.WindowTitles.Add("UDP");
                    #endregion
                }
                return this.mUIRButton;
            }
        }
        
        public UIItemText UIItemText
        {
            get
            {
                if ((this.mUIItemText == null))
                {
                    this.mUIItemText = new UIItemText(this);
                }
                return this.mUIItemText;
            }
        }
        
        public WpfButton UIRESTARTButton
        {
            get
            {
                if ((this.mUIRESTARTButton == null))
                {
                    this.mUIRESTARTButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRESTARTButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Button_Restart";
                    this.mUIRESTARTButton.WindowTitles.Add("UDP");
                    #endregion
                }
                return this.mUIRESTARTButton;
            }
        }
        
        public WpfText UIItemText1
        {
            get
            {
                if ((this.mUIItemText1 == null))
                {
                    this.mUIItemText1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItemText1.SearchProperties[WpfText.PropertyNames.AutomationId] = "Data_TotalPackets";
                    this.mUIItemText1.WindowTitles.Add("UDP");
                    #endregion
                }
                return this.mUIItemText1;
            }
        }
        
        public WpfText UIItemText2
        {
            get
            {
                if ((this.mUIItemText2 == null))
                {
                    this.mUIItemText2 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItemText2.SearchProperties[WpfText.PropertyNames.AutomationId] = "Data_PacketsLost";
                    this.mUIItemText2.WindowTitles.Add("UDP");
                    #endregion
                }
                return this.mUIItemText2;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUISTARTButton;
        
        private WpfButton mUIRButton;
        
        private UIItemText mUIItemText;
        
        private WpfButton mUIRESTARTButton;
        
        private WpfText mUIItemText1;
        
        private WpfText mUIItemText2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemText : WpfText
    {
        
        public UIItemText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "Data_LostPacketsPercent";
            this.WindowTitles.Add("UDP");
            #endregion
        }
        
        #region Properties
        public WpfText UIItemText1
        {
            get
            {
                if ((this.mUIItemText1 == null))
                {
                    this.mUIItemText1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItemText1.SearchProperties[WpfText.PropertyNames.Name] = "-";
                    this.mUIItemText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItemText1.WindowTitles.Add("UDP");
                    #endregion
                }
                return this.mUIItemText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIItemText1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUDPWindow1 : WinWindow
    {
        
        public UIUDPWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "UDP";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("UDP");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("UDP");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new WinList(this);
                    #region Search Criteria
                    this.mUIDesktopList.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopList.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIDesktopList;
        #endregion
    }
}
